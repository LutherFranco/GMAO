import streamlit as st
import pandas as pd

# === Charger les donn√©es ===
try:
    df_detail = pd.read_excel("r√©sum√©_attributs_manquants.xlsx", sheet_name="D√©tail")
    df_completude = pd.read_excel("r√©sum√©_attributs_manquants.xlsx", sheet_name="Compl√©tude")
except Exception as e:
    st.error(f"Erreur de lecture du fichier Excel : {e}")
    st.stop()

# === Interface ===
st.title("üìä Diagnostic GMAO par poste")

# Liste d√©roulante des postes
postes = sorted(df_detail["Poste"].dropna().unique())
poste_choisi = st.selectbox("üîΩ S√©lectionnez un poste :", postes)

# Compl√©tude visuelle
info_poste = df_completude[df_completude["Poste"] == poste_choisi]
if not info_poste.empty:
    taux = float(info_poste["Taux de compl√©tude (%)"].values[0])
    niveau = info_poste["Niveau"].values[0]
    st.metric("Taux de compl√©tude", f"{taux}%", delta=None)
    st.progress(taux / 100)
    st.markdown(f"**Niveau :** {niveau}")

# Attributs manquants
df_poste = df_detail[df_detail["Poste"] == poste_choisi].copy()
df_poste = df_poste.rename(columns={"√âquipement": "√âquipement_groupe"})

if df_poste.empty:
    st.success("‚úÖ Aucun attribut manquant pour ce poste.")
else:
    st.subheader("üß© Attributs manquants par √©quipement")

    grouped = df_poste.groupby("√âquipement_groupe")
    for equipement, groupe in grouped:
        st.markdown(f"### üõ†Ô∏è {equipement}")
        lignes = []

        for _, row in groupe.iterrows():
            attribut = row["Attribut manquant"]

            numero = row.get("Equipement") or row.get("√âquipement")
            description = row.get("Description")

            if pd.notna(numero) and str(numero).strip():
                info = str(numero)
            elif pd.notna(description) and str(description).strip():
                info = str(description)
            else:
                info = "‚õî Info manquante"

            lignes.append(f"- üî¥ **{info}** ‚Üí {attribut}")

        st.markdown("\n".join(lignes))

# Optionnel : debug
if st.checkbox("üõ†Ô∏è Afficher les colonnes disponibles (debug)"):
    st.write(df_poste.columns.tolist())
